package main

// constants
var PLAYER_COLOR_RED f32 = 1.0
var PLAYER_COLOR_GREEN f32 = 1.0
var PLAYER_COLOR_BLUE f32 = 0.0
var PLAYER_RADIUS f32 = 0.025
var PLAYER_SPAWN_LINE i32 = 23
var PLAYER_SPAWN_COLUMN i32 = 13

// vars 
var SCORE i32 = 0
var PLAYER_LIVES i32 = 3
var nextLifePos graphical2d.Position2D
var latestPlayerMoveEvent f64


// structs
type Player struct {
  prev_pos graphical2d.Position2D      // 2D position (x, y)
  position graphical2d.Position2D      // 2D position (x, y)
  color graphical2d.Color              // RGB color (r, g, b)
  radius f32
  direction i32
  index_x i32
  index_y i32
}
var player Player


/***************************************
 * Declaration of constructor functions.
***************************************/

/* Function     : newPlayer
   Input        : Spawn line (line i32)
                : Spawn column (column i32)
                : Radius (rad f32)
   Output       : player (pl Player)
   Description  : Constructor for the Player struct.
*/
func newPlayer (line i32, column i32, rad f32) (pl Player) {
  var pos graphical2d.Position2D
  pos = coords2position(line, column)

  var col graphical2d.Color
  col = graphical2d.newColor(PLAYER_COLOR_RED, PLAYER_COLOR_GREEN, PLAYER_COLOR_BLUE)

  pl = Player{
    prev_pos: pos,
    position: pos,
    color: col,
    radius: rad,
    direction: LEFT,
    index_x: column,
    index_y: line}
}


/* Function     : movePlayer
   Input        : Direction in which the player should move (direction i32)
   Description  : Manages the player movement.
*/
func movePlayer(direction i32) {
  latestPlayerMoveEvent = glfw.GetTime()
  player.prev_pos = coords2position(player.index_y, player.index_x)

  if bool.eq(canMove(direction, player.index_y, player.index_x), true) {
    // Moves 
    if direction == UP {
      player.index_y = i32.sub(player.index_y, 1)
    } else
    if direction == DOWN {
      player.index_y = i32.add(player.index_y, 1)
    } else
    if direction == LEFT {
      player.index_x = i32.sub(player.index_x, 1)
    } else
    if direction == RIGHT {
      player.index_x = i32.add(player.index_x, 1)
    }
    
    player.direction = direction
    player.position = coords2position(player.index_y, player.index_x)
  }

  // Check for collisions with ghosts
  // FIX ME / FIXME: remove double collision check
  for i:=0; i<4; i++ {
    checkPlayerGhostCollision(ghosts[i])
  }
}