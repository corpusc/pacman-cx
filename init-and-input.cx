package main

/***************************************
 * Initialization functions.
***************************************/

/* Function     : initGLFW
   Description  : Initializes the game window and keyboard input manager.
*/
func initGLFW() {
  glfw.Init()

  glfw.CreateWindow("window", WIDTH_WINDOW, HEIGHT_WINDOW, "PAC-MAN CX 0.0.3")
  glfw.MakeContextCurrent("window")

	gl.Init()
  gl.Enable(gl.BLEND)
  gl.BlendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)

  glfw.SetKeyCallback("window", "keyboardEvent")
}

/* Function     : initOpenGL
   Output       : OpenGL program (program i32)
   Description  : Initializes the OpenGL program.
*/
func initOpenGL() (program i32) {
	program = gl.CreateProgram()
  gl.LinkProgram(program)
  gl.Enable(gl.TEXTURE_2D)
  gl.UseProgram(program)
}



/***************************************
 * Keyboard input.
***************************************/

// Keys
var RIGHT_ARROW_KEY i32 = 262
var LEFT_ARROW_KEY i32 = 263
var DOWN_ARROW_KEY i32 = 264
var UP_ARROW_KEY i32 = 265

var GLFW_KEY_W i32 = 87
var GLFW_KEY_A i32 = 65
var GLFW_KEY_S i32 = 83
var GLFW_KEY_D i32 = 68

/* Function     : keyboardEvent
   Input        : active window (window str)
                : keyboard key (key i32)
                : scancode (scancode i32)
                : keyboard action (action i32)
                : modifiers (mods i32)
   Description  : fired per keyboard event
*/
func keyboardEvent(window str, key i32, scancode i32, action i32, mods i32) {
  if key == 53 { // GLFW_KEY_5 
    str.print("you pressed 5 ^^^^^^^^^^^^^^^^^ QUITTING GAME ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^")
    glfw.SetShouldClose("window", true)
  }
  
  if gameMode == GAMEMODE_MENU {
    if action == 1 {
      if eventRight(key) {
      }
      if eventLeft(key) {
      }
      if eventDown(key) {
      }
      if eventUp(key) {
      }
    }
  }
}

/* Function     : getPosAfterLiningUpWithTunnel
   Description  : apply time-delta-based distance across 2 directions.
                  1st, move towards the exact center of the tunnel 
                  (valid cell-exit direction) that player is pushing
                  towards.  THEN start moving in the pushed direction.
*/
func lineUpWithTunnelBeforeGoing(dir i32, dist f32, pos Position2D) {
  var f f32
  
  if dir == LEFT || dir == RIGHT {
    f = player.cell_pos.y
  } else { // up or down
    f = player.cell_pos.x
  }
  
  if f > 0.0 {
    f = f32.sub(
    f, dist)
    
    if f < 0.0 {
      dist = f32.sub(
      dist, f32.abs(f))
      f = 0.0
    }
  }

  if f < 0.0 {
    f = 
    f + dist
    
    if f > 0.0 {
      dist = f32.sub(
      dist, f)
      f = 0.0
    }
  }

  if dir == LEFT || dir == RIGHT {
    player.cell_pos.y = f
  } else
  if dir == DOWN || dir == UP {
    player.cell_pos.x = f
  }
  
  if dist > 0.0 {
    if dir == LEFT {
      player.cell_pos.x = f32.add(player.cell_pos.x, -dist)
    } else
    if dir == RIGHT {
      player.cell_pos.x = f32.add(player.cell_pos.x, dist)
    } else
    if dir == DOWN {
      player.cell_pos.y = f32.add(player.cell_pos.y, -dist)
    } else
    if dir == UP {
      player.cell_pos.y = f32.add(player.cell_pos.y, dist)
    }
  }
}

/* Function     : movePlayerByHeldKeys
   Description  : poll for held down keys
*/
func movePlayerByHeldKeys() {
  prevTime  = currTime
  currTime  = glfw.GetTime()
  deltaTime = f64.f32(currTime - prevTime)
  var dist f32 = deltaTime * player.speed // total move distance
  
  if heldKeyforRight() {
    player.direction = RIGHT

    if player.cell_pos.x < 0.0 || canMove(RIGHT, player.index_y, player.index_x) {
      lineUpWithTunnelBeforeGoing(RIGHT, dist, player.cell_pos)
      
      if player.cell_pos.x > CELL_HALF_WIDTH {
        player.cell_pos.x = f32.sub(player.cell_pos.x, CELL_WIDTH)
        player.index_x = i32.add(player.index_x, 1)
      }
    }
    //movePlayer(RIGHT)
  } else
  if heldKeyforLeft() {
    player.direction = LEFT

    if player.cell_pos.x > 0.0 || canMove(LEFT, player.index_y, player.index_x) {
      lineUpWithTunnelBeforeGoing(LEFT, dist, player.cell_pos)
      
      if player.cell_pos.x < -CELL_HALF_WIDTH {
        player.cell_pos.x = f32.add(player.cell_pos.x, CELL_WIDTH)
        player.index_x = i32.sub(player.index_x, 1)
      }
    }
    //movePlayer(LEFT)
  } else
  if heldKeyforDown() {
    player.direction = DOWN

    if player.cell_pos.y > 0.0 || canMove(DOWN, player.index_y, player.index_x) {
      lineUpWithTunnelBeforeGoing(DOWN, dist, player.cell_pos)
      
      if player.cell_pos.y < -CELL_HALF_HEIGHT {
        player.cell_pos.y = f32.add(player.cell_pos.y, CELL_HEIGHT)
        player.index_y = i32.add(player.index_y, 1)
      }
    }
    //movePlayer(DOWN)
  } else
  if heldKeyforUp() {
    player.direction = UP

    if player.cell_pos.y < 0.0 || canMove(UP, player.index_y, player.index_x) {
      lineUpWithTunnelBeforeGoing(UP, dist, player.cell_pos)
      
      if player.cell_pos.y > CELL_HALF_HEIGHT {
        player.cell_pos.y = f32.sub(player.cell_pos.y, CELL_HEIGHT)
        player.index_y = i32.sub(player.index_y, 1)
      }
    }
    //movePlayer(UP)
  }
  
  player.position = coords2position(player.index_y, player.index_x)
}



/* Functions    : event[Direction]
   Description  : Checks 2 sets of keys for player's JUST_PRESSED direction
*/
func eventLeft(key i32) (out bool) {
  if i32.eq(key, GLFW_KEY_A) ||
    i32.eq(key, LEFT_ARROW_KEY) {
    out = true
  }
}

func eventRight(key i32) (out bool) {
  if i32.eq(key, GLFW_KEY_D) ||
    i32.eq(key, RIGHT_ARROW_KEY) {
    out = true
  }
}

func eventDown(key i32) (out bool) {
  if i32.eq(key, GLFW_KEY_S) ||
    i32.eq(key, DOWN_ARROW_KEY) {
    out = true
  }
}

func eventUp(key i32) (out bool) {
  if i32.eq(key, GLFW_KEY_W) ||
    i32.eq(key, UP_ARROW_KEY) {
    out = true
  }
}



/* Functions    : heldKeyfor[Direction]
   Description  : Checks 2 sets of keys for player's HELD direction
*/
func heldKeyforLeft() (out bool) {
  if i32.eq(glfw.GetKey("window", GLFW_KEY_A), 1) ||
    i32.eq(glfw.GetKey("window", LEFT_ARROW_KEY), 1) {
    out = true
  }
}

func heldKeyforRight() (out bool) {
  if i32.eq(glfw.GetKey("window", GLFW_KEY_D), 1) ||
    i32.eq(glfw.GetKey("window", RIGHT_ARROW_KEY), 1) {
    out = true
  }
}

func heldKeyforDown() (out bool) {
  if i32.eq(glfw.GetKey("window", GLFW_KEY_S), 1) ||
    i32.eq(glfw.GetKey("window", DOWN_ARROW_KEY), 1) {
    out = true
  }
}

func heldKeyforUp() (out bool) {
  if i32.eq(glfw.GetKey("window", GLFW_KEY_W), 1) ||
    i32.eq(glfw.GetKey("window", UP_ARROW_KEY), 1) {
    out = true
  }
}

